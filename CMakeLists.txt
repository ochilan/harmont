cmake_minimum_required(VERSION 2.8.8)
project(harmont)

set (harmont_VERSION_MAJOR 0)
set (harmont_VERSION_MINOR 1)

configure_file (
  "${PROJECT_SOURCE_DIR}/config.hpp.in"
  "${PROJECT_SOURCE_DIR}/include/config.hpp"
)

include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${PROJECT_BINARY_DIR}")
include_directories("${PROJECT_SOURCE_DIR}/include")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

if(CMAKE_COMPILER_IS_GNUCXX)
	add_definitions(-fPIC)
	add_definitions(-O3)
	add_definitions(-g)
	add_definitions(-std=c++1y)
    add_definitions(-Wall)
    add_definitions(-Wno-unused-function)
    add_definitions(-Wno-unused-local-typedefs)
endif()

find_package(Eigen)
find_package(OpenGL)
find_package(GLEW)
find_package(RGBE)

find_package(Plustache)
if (PLUSTACHE_FOUND)
    add_definitions(-DUSE_PLUSTACHE)
    if (RGBE_FOUND)
        add_definitions(-DBUILD_DEFERRED_RENDERER)
    endif()
else()
    message(STATUS "No plustache package found. Plustache support will be disabled.")
endif()

find_package(GLUT)
if (GLUT_FOUND)
    add_definitions(-DUSE_FREEGLUT)
else()
    message(STATUS "No freeglut package found. Freeglut support will be disabled.")
endif()

find_package(OpenMesh)
if (OPENMESH_FOUND)
    add_definitions(-DUSE_OPENMESH)
else()
    message(STATUS "No OpenMesh package found. OpenMesh support will be disabled.")
endif()

file (GLOB_RECURSE obj RELATIVE "${PROJECT_SOURCE_DIR}" "src/*.cpp")
file (GLOB_RECURSE units RELATIVE "${PROJECT_SOURCE_DIR}" "test/units/*.cpp")
if (GLEW_FOUND AND EIGEN_FOUND)
	include_directories(${GLEW_INCLUDE_DIRS})
	include_directories(${EIGEN_INCLUDE_DIRS})
    if(PLUSTACHE_FOUND)
        include_directories(${PLUSTACHE_INCLUDE_DIRS})
    else()
        set(PLUSTACHE_LIBRARIES "")
    endif()
    if(GLUT_FOUND)
        include_directories(${GLUT_INCLUDE_DIRS})
    else()
        set(GLUT_LIBRARIES "")
    endif()
    if(OPENMESH_FOUND)
        include_directories(${OPENMESH_INCLUDE_DIRS})
    else()
        set(OPENMESH_LIBRARIES "")
    endif()
    if(RGBE_FOUND)
        include_directories(${RGBE_INCLUDE_DIRS})
    else()
        set(RGBE_LIBRARIES "")
    endif()
	add_library(harmont SHARED ${obj})
	target_link_libraries(harmont ${GLUT_LIBRARIES} ${GLEW_LIBRARIES} ${PLUSTACHE_LIBRARIES} ${OPENMESH_LIBRARIES} ${RGBE_LIBRARIES} "dl")

	# install binary
	install (TARGETS harmont DESTINATION lib)
	# install header
	install (DIRECTORY include/ DESTINATION include/harmont)
    # install shader
    if (BUILD_DEFERRED_RENDERER)
        install (DIRECTORY glsl/ DESTINATION include/harmont/glsl)
    endif()
endif()

